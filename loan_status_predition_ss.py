# -*- coding: utf-8 -*-
"""Loan Status predition SS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GgJDUdIgcuihu2T5vmSKpYccAphP_Pl5
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""DATA COLLECTION AND PROCESSING

"""

#LOADING THE DATASET TO PANDAS DATAFRAME
loan_dataset=pd.read_csv('/content/train_u6lujuX_CVtuZ9i (1).csv')

type(loan_dataset)

loan_dataset.head()

loan_dataset.shape

loan_dataset.describe()
#only numerical values data are showmn

#number of misisng values
loan_dataset.isnull().sum()

#if we have numerical column then we can replace by mean of median but here we have categorical data as well so we will judt drop in this case
loan_dataset=loan_dataset.dropna()

loan_dataset.isnull().sum()

#label incoding

loan_dataset.replace({'Loan_Status':{'N':0,'Y':1}},inplace=True)

loan_dataset.head()

loan_dataset.shape

#dependent column values
loan_dataset['Dependents'].value_counts()

#replacing the value of 3+ to 4 as its a fixed value
loan_dataset=loan_dataset.replace(to_replace='3+',value=4)

#niw checking the ddependent values
loan_dataset['Dependents'].value_counts()

"""DATA VISUALIZATION"""

#eDUCATION AND LOAN STATUS

sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)

#martial satatus ans loan stauts
sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

#converting the categorical value to  numerical value
loan_dataset.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)

loan_dataset.head()

#seperating the data and label
# if we want to drop 1 column we can give directlyt but if more than 1 then as a list
X=loan_dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y=loan_dataset['Loan_Status']

print(X)

print(Y)

#train test split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)

print(X.shape)

print(X_test)

print(X_test.shape)

"""TRAING THE MODEL

SUPPORT VECTOR MACHINE MODEL
"""

classifier=svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

"""MODEL EVALUATION"""

#accuracy score for tran data
X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print(training_data_accuracy)

#accuracy score for test data
X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print(test_data_accuracy)
#no overfitting as it pperformace is good

"""MAKING THE PREDICTIVE SYSTEM"""

done